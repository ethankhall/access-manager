/*
 * This file is generated by jOOQ.
 */
package io.ehdev.account.db.tables;


import io.ehdev.account.db.AccountManager;
import io.ehdev.account.db.Indexes;
import io.ehdev.account.db.Keys;
import io.ehdev.account.db.tables.records.TargetRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TargetTable extends TableImpl<TargetRecord> {

    private static final long serialVersionUID = 37875820;

    /**
     * The reference instance of <code>account_manager.target</code>
     */
    public static final TargetTable TARGET = new TargetTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TargetRecord> getRecordType() {
        return TargetRecord.class;
    }

    /**
     * The column <code>account_manager.target.target_id</code>.
     */
    public final TableField<TargetRecord, Long> TARGET_ID = createField("target_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>account_manager.target.target_name</code>.
     */
    public final TableField<TargetRecord, String> TARGET_NAME = createField("target_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>account_manager.target</code> table reference
     */
    public TargetTable() {
        this(DSL.name("target"), null);
    }

    /**
     * Create an aliased <code>account_manager.target</code> table reference
     */
    public TargetTable(String alias) {
        this(DSL.name(alias), TARGET);
    }

    /**
     * Create an aliased <code>account_manager.target</code> table reference
     */
    public TargetTable(Name alias) {
        this(alias, TARGET);
    }

    private TargetTable(Name alias, Table<TargetRecord> aliased) {
        this(alias, aliased, null);
    }

    private TargetTable(Name alias, Table<TargetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TargetTable(Table<O> child, ForeignKey<O, TargetRecord> key) {
        super(child, key, TARGET);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AccountManager.ACCOUNT_MANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TARGET_PRIMARY, Indexes.TARGET_TARGET_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TargetRecord, Long> getIdentity() {
        return Keys.IDENTITY_TARGET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TargetRecord> getPrimaryKey() {
        return Keys.KEY_TARGET_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TargetRecord>> getKeys() {
        return Arrays.<UniqueKey<TargetRecord>>asList(Keys.KEY_TARGET_PRIMARY, Keys.KEY_TARGET_TARGET_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TargetTable as(String alias) {
        return new TargetTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TargetTable as(Name alias) {
        return new TargetTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TargetTable rename(String name) {
        return new TargetTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TargetTable rename(Name name) {
        return new TargetTable(name, null);
    }
}
