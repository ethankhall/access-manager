/*
 * This file is generated by jOOQ.
 */
package io.ehdev.account.db.tables;


import io.ehdev.account.db.AccountManager;
import io.ehdev.account.db.Indexes;
import io.ehdev.account.db.Keys;
import io.ehdev.account.db.tables.records.SsUserconnectionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SsUserconnectionTable extends TableImpl<SsUserconnectionRecord> {

    private static final long serialVersionUID = 1585214779;

    /**
     * The reference instance of <code>account_manager.ss_UserConnection</code>
     */
    public static final SsUserconnectionTable SS_USERCONNECTION = new SsUserconnectionTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SsUserconnectionRecord> getRecordType() {
        return SsUserconnectionRecord.class;
    }

    /**
     * The column <code>account_manager.ss_UserConnection.userId</code>.
     */
    public final TableField<SsUserconnectionRecord, String> USERID = createField("userId", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.providerId</code>.
     */
    public final TableField<SsUserconnectionRecord, String> PROVIDERID = createField("providerId", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.providerUserId</code>.
     */
    public final TableField<SsUserconnectionRecord, String> PROVIDERUSERID = createField("providerUserId", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.rank</code>.
     */
    public final TableField<SsUserconnectionRecord, Integer> RANK = createField("rank", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.displayName</code>.
     */
    public final TableField<SsUserconnectionRecord, String> DISPLAYNAME = createField("displayName", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.profileUrl</code>.
     */
    public final TableField<SsUserconnectionRecord, String> PROFILEURL = createField("profileUrl", org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.imageUrl</code>.
     */
    public final TableField<SsUserconnectionRecord, String> IMAGEURL = createField("imageUrl", org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.accessToken</code>.
     */
    public final TableField<SsUserconnectionRecord, String> ACCESSTOKEN = createField("accessToken", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.secret</code>.
     */
    public final TableField<SsUserconnectionRecord, String> SECRET = createField("secret", org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.refreshToken</code>.
     */
    public final TableField<SsUserconnectionRecord, String> REFRESHTOKEN = createField("refreshToken", org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>account_manager.ss_UserConnection.expireTime</code>.
     */
    public final TableField<SsUserconnectionRecord, Long> EXPIRETIME = createField("expireTime", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>account_manager.ss_UserConnection</code> table reference
     */
    public SsUserconnectionTable() {
        this(DSL.name("ss_UserConnection"), null);
    }

    /**
     * Create an aliased <code>account_manager.ss_UserConnection</code> table reference
     */
    public SsUserconnectionTable(String alias) {
        this(DSL.name(alias), SS_USERCONNECTION);
    }

    /**
     * Create an aliased <code>account_manager.ss_UserConnection</code> table reference
     */
    public SsUserconnectionTable(Name alias) {
        this(alias, SS_USERCONNECTION);
    }

    private SsUserconnectionTable(Name alias, Table<SsUserconnectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SsUserconnectionTable(Name alias, Table<SsUserconnectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SsUserconnectionTable(Table<O> child, ForeignKey<O, SsUserconnectionRecord> key) {
        super(child, key, SS_USERCONNECTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AccountManager.ACCOUNT_MANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SS_USERCONNECTION_PRIMARY, Indexes.SS_USERCONNECTION_USERCONNECTIONRANK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SsUserconnectionRecord> getPrimaryKey() {
        return Keys.KEY_SS_USERCONNECTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SsUserconnectionRecord>> getKeys() {
        return Arrays.<UniqueKey<SsUserconnectionRecord>>asList(Keys.KEY_SS_USERCONNECTION_PRIMARY, Keys.KEY_SS_USERCONNECTION_USERCONNECTIONRANK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SsUserconnectionTable as(String alias) {
        return new SsUserconnectionTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SsUserconnectionTable as(Name alias) {
        return new SsUserconnectionTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SsUserconnectionTable rename(String name) {
        return new SsUserconnectionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SsUserconnectionTable rename(Name name) {
        return new SsUserconnectionTable(name, null);
    }
}
