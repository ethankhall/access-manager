/*
 * This file is generated by jOOQ.
 */
package io.ehdev.account.db.tables;


import io.ehdev.account.db.AccountManager;
import io.ehdev.account.db.Indexes;
import io.ehdev.account.db.Keys;
import io.ehdev.account.db.tables.records.UserDetailsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDetailsTable extends TableImpl<UserDetailsRecord> {

    private static final long serialVersionUID = -174767117;

    /**
     * The reference instance of <code>account_manager.user_details</code>
     */
    public static final UserDetailsTable USER_DETAILS = new UserDetailsTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDetailsRecord> getRecordType() {
        return UserDetailsRecord.class;
    }

    /**
     * The column <code>account_manager.user_details.user_id</code>.
     */
    public final TableField<UserDetailsRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>account_manager.user_details.user_ref</code>.
     */
    public final TableField<UserDetailsRecord, String> USER_REF = createField("user_ref", org.jooq.impl.SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>account_manager.user_details.email</code>.
     */
    public final TableField<UserDetailsRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>account_manager.user_details.display_name</code>.
     */
    public final TableField<UserDetailsRecord, String> DISPLAY_NAME = createField("display_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * Create a <code>account_manager.user_details</code> table reference
     */
    public UserDetailsTable() {
        this(DSL.name("user_details"), null);
    }

    /**
     * Create an aliased <code>account_manager.user_details</code> table reference
     */
    public UserDetailsTable(String alias) {
        this(DSL.name(alias), USER_DETAILS);
    }

    /**
     * Create an aliased <code>account_manager.user_details</code> table reference
     */
    public UserDetailsTable(Name alias) {
        this(alias, USER_DETAILS);
    }

    private UserDetailsTable(Name alias, Table<UserDetailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDetailsTable(Name alias, Table<UserDetailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserDetailsTable(Table<O> child, ForeignKey<O, UserDetailsRecord> key) {
        super(child, key, USER_DETAILS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AccountManager.ACCOUNT_MANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_DETAILS_EMAIL, Indexes.USER_DETAILS_PRIMARY, Indexes.USER_DETAILS_USER_REF);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserDetailsRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_DETAILS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserDetailsRecord> getPrimaryKey() {
        return Keys.KEY_USER_DETAILS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserDetailsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserDetailsRecord>>asList(Keys.KEY_USER_DETAILS_PRIMARY, Keys.KEY_USER_DETAILS_USER_REF, Keys.KEY_USER_DETAILS_EMAIL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserDetailsTable as(String alias) {
        return new UserDetailsTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserDetailsTable as(Name alias) {
        return new UserDetailsTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetailsTable rename(String name) {
        return new UserDetailsTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDetailsTable rename(Name name) {
        return new UserDetailsTable(name, null);
    }
}
